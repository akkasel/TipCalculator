package com.akka.tipcalculator

import android.content.Context
import android.os.Bundle
import android.view.KeyEvent
import android.view.View
import android.view.inputmethod.InputMethodManager
import androidx.appcompat.app.AppCompatActivity
import com.akka.tipcalculator.databinding.ActivityMainBinding
import java.text.NumberFormat.getCurrencyInstance
import kotlin.math.ceil

class MainActivity : AppCompatActivity() {

    /** Binding (ex: ActivityMainBinding) has similar function to findViewById
        But with ViewBinding/Binding, you don't need to write code 'findViewById' for every View.
        Because Binding has initialized all the View component on your Fragment / Activity.

        Example :
        1. With findViewById()
        val myButton : Button = findViewById(R.id.my_button)
        myButton.text = "Calculate"

        2. With View Binding (the better way)
        val myButton : Button = binding.myButton
        myButton.text = "Calculate"

        3. With View binding and No extra variable (the best way)
        binding.myButton.text = "Calculate"

        Notes :
        The name of the binding class is generated by converting the name of the XML file to camel case
        and adding the word "Binding" to the end.
        For example :
        * activity_main.xml -> ActivityMainBinding
        * @id/text_view -> textView
     **/

    private lateinit var binding : ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // to run calculateTip method when the "Calculate" Button is clicked.
        binding.buttonCalculate.setOnClickListener {
            calculateTip()
        }

        // use the 'handleKeyEvent' method on 'Cost of Service' EditText
        binding.costOfServiceEditText.setOnKeyListener{ view, keyCode, _ -> handleKeyEvent(view, keyCode)}

    }

    private fun calculateTip() {
        // get the "Cost of Service" EditText, get the text and convert it from Editable to String.
        val stringInTextField = binding.costOfServiceEditText.text.toString()

        // to change the String of stringInTextField to 'Double' data type.
        val cost = stringInTextField.toDoubleOrNull()

        // to handle so the app doesn't crash when User keep the EditText 'cost of service' empty.
        if (cost == null) {
            binding.textViewTipAmountResult.text = ""
            return
        }

        // to define the percentage for the tip, based on the Radio Button option that User chooses.
        val tipPercentage = when(binding.radioGroupOption.checkedRadioButtonId) {
            R.id.radio_button_amazing -> 0.20
            R.id.radio_button_good -> 0.18
            else -> 0.15
        }

        // calculate the tip (Tip = cost * Tip Percentage)
        var tip = cost * tipPercentage

        // to check if the Switch is checked or not.
        // then if the Switch is checked, round up the 'tip' value.
        if (binding.switchRoundUpTip.isChecked) {
            tip = ceil(tip)
        }

        // Format the tip value to based on currency text format.
        val formattedTip = getCurrencyInstance().format(tip)

        // change the "Tip Amount Result" TextView value to formatted based on each country currency.
        binding.textViewTipAmountResult.text = getString(R.string.tip_amount_text_view, formattedTip)
    }

    // to Hide the keyboard after User press 'Enter' when filling the TextField/EditText.
    private fun handleKeyEvent(view : View, keyCode : Int) : Boolean {
        if (keyCode == KeyEvent.KEYCODE_ENTER) {
            // Hide the keyboard
            val inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
            inputMethodManager.hideSoftInputFromWindow(view.windowToken, 0)
            return true
        }
        return false
    }

}